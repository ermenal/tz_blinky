
Discarded input sections

 .group         0x00000000        0xc build/non_secure/main_ns.o
 .group         0x00000000        0xc build/non_secure/main_ns.o
 .group         0x00000000        0xc build/non_secure/main_ns.o
 .group         0x00000000        0xc build/non_secure/main_ns.o
 .group         0x00000000        0xc build/non_secure/main_ns.o
 .group         0x00000000        0xc build/non_secure/main_ns.o
 .group         0x00000000        0xc build/non_secure/main_ns.o
 .text          0x00000000        0x0 build/non_secure/main_ns.o
 .data          0x00000000        0x0 build/non_secure/main_ns.o
 .bss           0x00000000        0x0 build/non_secure/main_ns.o
 .text.delay    0x00000000       0x20 build/non_secure/main_ns.o
 .text.main_ns  0x00000000       0x14 build/non_secure/main_ns.o
 .debug_info    0x00000000       0xce build/non_secure/main_ns.o
 .debug_abbrev  0x00000000       0x9a build/non_secure/main_ns.o
 .debug_aranges
                0x00000000       0x28 build/non_secure/main_ns.o
 .debug_rnglists
                0x00000000       0x19 build/non_secure/main_ns.o
 .debug_macro   0x00000000       0x6d build/non_secure/main_ns.o
 .debug_macro   0x00000000      0xac0 build/non_secure/main_ns.o
 .debug_macro   0x00000000       0x22 build/non_secure/main_ns.o
 .debug_macro   0x00000000       0x8e build/non_secure/main_ns.o
 .debug_macro   0x00000000       0x51 build/non_secure/main_ns.o
 .debug_macro   0x00000000      0x103 build/non_secure/main_ns.o
 .debug_macro   0x00000000       0x6a build/non_secure/main_ns.o
 .debug_macro   0x00000000      0x1df build/non_secure/main_ns.o
 .debug_line    0x00000000      0x2ec build/non_secure/main_ns.o
 .debug_str     0x00000000     0x3d4c build/non_secure/main_ns.o
 .comment       0x00000000       0x47 build/non_secure/main_ns.o
 .debug_frame   0x00000000       0x54 build/non_secure/main_ns.o
 .ARM.attributes
                0x00000000       0x34 build/non_secure/main_ns.o

Memory Configuration

Name             Origin             Length             Attributes
FLASH_NS         0x08020000         0x00060000         xr
RAM_NS           0x20008000         0x00008000         xrw
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD build/non_secure/main_ns.o
LOAD build/secure_cmse_lib.o

.text
 *(.vectors)
 *(.text*)
 *(.init)
 *(.fini)
 *crtbegin.o(.ctors)
 *crtbegin?.o(.ctors)
 *(EXCLUDE_FILE(*crtend.o *crtend?.o) .ctors)
 *(SORT_BY_NAME(.ctors.*))
 *(.ctors)
 *crtbegin.o(.dtors)
 *crtbegin?.o(.dtors)
 *(EXCLUDE_FILE(*crtend.o *crtend?.o) .dtors)
 *(SORT_BY_NAME(.dtors.*))
 *(.dtors)
 *(.rodata*)
 *(.eh_frame*)

.glue_7         0x08020000        0x0
 .glue_7        0x08020000        0x0 linker stubs

.glue_7t        0x08020000        0x0
 .glue_7t       0x08020000        0x0 linker stubs

.vfp11_veneer   0x08020000        0x0
 .vfp11_veneer  0x08020000        0x0 linker stubs

.v4_bx          0x08020000        0x0
 .v4_bx         0x08020000        0x0 linker stubs

.ARM.extab
 *(.ARM.extab* .gnu.linkonce.armextab.*)
                0x00000000                        __exidx_start = .

.ARM.exidx
 *(.ARM.exidx* .gnu.linkonce.armexidx.*)
                0x00000000                        __exidx_end = .

.copy.table     0x08020000        0xc
                0x08020000                        . = ALIGN (0x4)
                0x08020000                        __copy_table_start__ = .
                0x08020000        0x4 LONG 0x802000c __etext
                0x08020004        0x4 LONG 0x20008000 __data_start__
                0x08020008        0x4 LONG 0x0 ((__data_end__ - __data_start__) / 0x4)
                0x0802000c                        __copy_table_end__ = .

.zero.table     0x0802000c        0x0
                0x0802000c                        . = ALIGN (0x4)
                0x0802000c                        __zero_table_start__ = .
                0x0802000c                        __zero_table_end__ = .
                0x0802000c                        __etext = ALIGN (0x4)

.data           0x20008000        0x0 load address 0x0802000c
                0x20008000                        __data_start__ = .
 *(vtable)
 *(.data*)
                0x20008000                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__ram_func_section_start = .)
 *(.ram)
                [!provide]                        PROVIDE (__ram_func_section_end = .)
                0x20008000                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__preinit_array_start = .)
 *(.preinit_array)
                [!provide]                        PROVIDE (__preinit_array_end = .)
                0x20008000                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__init_array_start = .)
 *(SORT_BY_NAME(.init_array.*))
 *(.init_array)
                [!provide]                        PROVIDE (__init_array_end = .)
                0x20008000                        . = ALIGN (0x4)
                [!provide]                        PROVIDE (__fini_array_start = .)
 *(SORT_BY_NAME(.fini_array.*))
 *(.fini_array)
                [!provide]                        PROVIDE (__fini_array_end = .)
 *(.jcr*)
                0x20008000                        . = ALIGN (0x4)
                0x20008000                        __data_end__ = .

.bss            0x20008000        0x0
                0x20008000                        . = ALIGN (0x4)
                0x20008000                        __bss_start__ = .
 *(.bss)
 *(.bss.*)
 *(COMMON)
                0x20008000                        . = ALIGN (0x4)
                0x20008000                        __bss_end__ = .

.heap           0x20008000        0x0
                0x20008000                        __HeapBase = .
                0x20008000                        __end__ = .
                0x20008000                        end = __end__
                0x20008000                        _end = __end__
 *(.heap*)
                0x20008000                        __HeapLimit = .

.stack_dummy
 *(.stack*)
                0x20010000                        __StackTop = (ORIGIN (RAM_NS) + LENGTH (RAM_NS))
                0x20010000                        __StackLimit = (__StackTop - SIZEOF (.stack_dummy))
                [!provide]                        PROVIDE (__stack = __StackTop)
                0x00000001                        ASSERT ((__StackLimit >= __HeapLimit), region RAM overflowed with stack)
                0x00000001                        ASSERT ((LENGTH (FLASH_NS) >= (__etext + SIZEOF (.data))), FLASH_NS memory overflowed !)
OUTPUT(build/non_secure.elf elf32-littlearm)
LOAD linker stubs
